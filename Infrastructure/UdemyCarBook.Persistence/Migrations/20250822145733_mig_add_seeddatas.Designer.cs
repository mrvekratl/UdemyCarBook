// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UdemyCarBook.Persistence.Context;

#nullable disable

namespace UdemyCarBook.Persistence.Migrations
{
    [DbContext(typeof(CarBookContext))]
    [Migration("20250822145733_mig_add_seeddatas")]
    partial class mig_add_seeddatas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.About", b =>
                {
                    b.Property<int>("AboutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutID");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("AppRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppRoleId"));

                    b.Property<string>("AppRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppRoleId");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserId"));

                    b.Property<int>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserId");

                    b.HasIndex("AppRoleId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Banner", b =>
                {
                    b.Property<int>("BannerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BannerID");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogID"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandID = 1,
                            Name = "BMW"
                        },
                        new
                        {
                            BrandID = 2,
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            BrandID = 3,
                            Name = "Audi"
                        },
                        new
                        {
                            BrandID = 4,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            BrandID = 5,
                            Name = "Volvo"
                        },
                        new
                        {
                            BrandID = 6,
                            Name = "Ford"
                        },
                        new
                        {
                            BrandID = 7,
                            Name = "Toyota"
                        },
                        new
                        {
                            BrandID = 8,
                            Name = "Hyundai"
                        },
                        new
                        {
                            BrandID = 9,
                            Name = "Peugeot"
                        },
                        new
                        {
                            BrandID = 10,
                            Name = "Renault"
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"));

                    b.Property<string>("BigImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fuel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Km")
                        .HasColumnType("int");

                    b.Property<byte>("Luggage")
                        .HasColumnType("tinyint");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Seat")
                        .HasColumnType("tinyint");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarID");

                    b.HasIndex("BrandID");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarID = 1,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?bmw,interior",
                            BrandID = 1,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?bmw,car",
                            Fuel = "Benzin",
                            Km = 35000,
                            Luggage = (byte)4,
                            Model = "BMW 320i",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 2,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?mercedes,interior",
                            BrandID = 2,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?mercedes,car",
                            Fuel = "Dizel",
                            Km = 28000,
                            Luggage = (byte)4,
                            Model = "Mercedes-Benz C200",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 3,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?audi,interior",
                            BrandID = 3,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?audi,car",
                            Fuel = "Benzin",
                            Km = 30000,
                            Luggage = (byte)4,
                            Model = "Audi A4",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 4,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?volkswagen,interior",
                            BrandID = 4,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?volkswagen,car",
                            Fuel = "Dizel",
                            Km = 40000,
                            Luggage = (byte)4,
                            Model = "Volkswagen Passat",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 5,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?volvo,interior",
                            BrandID = 5,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?volvo,car",
                            Fuel = "Dizel",
                            Km = 25000,
                            Luggage = (byte)5,
                            Model = "Volvo XC60",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 6,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?ford,interior",
                            BrandID = 6,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?ford,car",
                            Fuel = "Benzin",
                            Km = 45000,
                            Luggage = (byte)4,
                            Model = "Ford Focus",
                            Seat = (byte)5,
                            Transmission = "Manuel"
                        },
                        new
                        {
                            CarID = 7,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?toyota,interior",
                            BrandID = 7,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?toyota,car",
                            Fuel = "Hybrid",
                            Km = 50000,
                            Luggage = (byte)4,
                            Model = "Toyota Corolla",
                            Seat = (byte)5,
                            Transmission = "Otomatik"
                        },
                        new
                        {
                            CarID = 8,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?hyundai,interior",
                            BrandID = 8,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?hyundai,car",
                            Fuel = "Benzin",
                            Km = 52000,
                            Luggage = (byte)3,
                            Model = "Hyundai i20",
                            Seat = (byte)5,
                            Transmission = "Manuel"
                        },
                        new
                        {
                            CarID = 9,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?peugeot,interior",
                            BrandID = 9,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?peugeot,car",
                            Fuel = "Benzin",
                            Km = 48000,
                            Luggage = (byte)3,
                            Model = "Peugeot 208",
                            Seat = (byte)5,
                            Transmission = "Manuel"
                        },
                        new
                        {
                            CarID = 10,
                            BigImageUrl = "https://source.unsplash.com/1200x800/?renault,interior",
                            BrandID = 10,
                            CoverImageUrl = "https://source.unsplash.com/800x600/?renault,car",
                            Fuel = "Benzin",
                            Km = 55000,
                            Luggage = (byte)3,
                            Model = "Renault Clio",
                            Seat = (byte)5,
                            Transmission = "Manuel"
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarDescription", b =>
                {
                    b.Property<int>("CarDescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarDescriptionID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarDescriptionID");

                    b.HasIndex("CarID");

                    b.ToTable("CarDescriptions");

                    b.HasData(
                        new
                        {
                            CarDescriptionID = 1,
                            CarID = 1,
                            Details = "BMW 320i, modern tasarımı ve güçlü motoru ile konforlu sürüş sağlar."
                        },
                        new
                        {
                            CarDescriptionID = 2,
                            CarID = 2,
                            Details = "Mercedes C200, lüks ve güvenliği bir arada sunar."
                        },
                        new
                        {
                            CarDescriptionID = 3,
                            CarID = 3,
                            Details = "Audi A4, sportif tasarımı ve ileri teknolojisiyle öne çıkar."
                        },
                        new
                        {
                            CarDescriptionID = 4,
                            CarID = 4,
                            Details = "Volkswagen Passat, geniş iç hacmi ve ekonomik sürüşüyle aileler için ideal."
                        },
                        new
                        {
                            CarDescriptionID = 5,
                            CarID = 5,
                            Details = "Volvo XC60, güvenlik özellikleriyle ön plana çıkan SUV modelidir."
                        },
                        new
                        {
                            CarDescriptionID = 6,
                            CarID = 6,
                            Details = "Ford Focus, şehir içi kullanım için pratik ve ekonomik bir tercihtir."
                        },
                        new
                        {
                            CarDescriptionID = 7,
                            CarID = 7,
                            Details = "Toyota Corolla, dayanıklılığı ve düşük yakıt tüketimi ile bilinir."
                        },
                        new
                        {
                            CarDescriptionID = 8,
                            CarID = 8,
                            Details = "Hyundai i20, kompakt yapısı ve konforu ile dikkat çeker."
                        },
                        new
                        {
                            CarDescriptionID = 9,
                            CarID = 9,
                            Details = "Peugeot 208, şık tasarımı ve pratik iç mekan düzeni ile öne çıkar."
                        },
                        new
                        {
                            CarDescriptionID = 10,
                            CarID = 10,
                            Details = "Renault Clio, ekonomik yakıt tüketimi ve şehir içi rahatlığıyla tercih edilir."
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarFeature", b =>
                {
                    b.Property<int>("CarFeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarFeatureID"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("FeatureID")
                        .HasColumnType("int");

                    b.HasKey("CarFeatureID");

                    b.HasIndex("CarID");

                    b.HasIndex("FeatureID");

                    b.ToTable("CarFeatures");

                    b.HasData(
                        new
                        {
                            CarFeatureID = 1,
                            Available = true,
                            CarID = 1,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 2,
                            Available = true,
                            CarID = 1,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 3,
                            Available = true,
                            CarID = 1,
                            FeatureID = 3
                        },
                        new
                        {
                            CarFeatureID = 4,
                            Available = true,
                            CarID = 1,
                            FeatureID = 4
                        },
                        new
                        {
                            CarFeatureID = 5,
                            Available = true,
                            CarID = 1,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 6,
                            Available = true,
                            CarID = 2,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 7,
                            Available = true,
                            CarID = 2,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 8,
                            Available = true,
                            CarID = 2,
                            FeatureID = 4
                        },
                        new
                        {
                            CarFeatureID = 9,
                            Available = true,
                            CarID = 2,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 10,
                            Available = true,
                            CarID = 2,
                            FeatureID = 6
                        },
                        new
                        {
                            CarFeatureID = 11,
                            Available = true,
                            CarID = 3,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 12,
                            Available = true,
                            CarID = 3,
                            FeatureID = 3
                        },
                        new
                        {
                            CarFeatureID = 13,
                            Available = true,
                            CarID = 3,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 14,
                            Available = true,
                            CarID = 3,
                            FeatureID = 6
                        },
                        new
                        {
                            CarFeatureID = 15,
                            Available = true,
                            CarID = 3,
                            FeatureID = 7
                        },
                        new
                        {
                            CarFeatureID = 16,
                            Available = true,
                            CarID = 4,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 17,
                            Available = true,
                            CarID = 4,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 18,
                            Available = true,
                            CarID = 4,
                            FeatureID = 4
                        },
                        new
                        {
                            CarFeatureID = 19,
                            Available = true,
                            CarID = 4,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 20,
                            Available = true,
                            CarID = 4,
                            FeatureID = 7
                        },
                        new
                        {
                            CarFeatureID = 21,
                            Available = true,
                            CarID = 5,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 22,
                            Available = true,
                            CarID = 5,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 23,
                            Available = true,
                            CarID = 5,
                            FeatureID = 3
                        },
                        new
                        {
                            CarFeatureID = 24,
                            Available = true,
                            CarID = 5,
                            FeatureID = 4
                        },
                        new
                        {
                            CarFeatureID = 25,
                            Available = true,
                            CarID = 5,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 26,
                            Available = true,
                            CarID = 6,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 27,
                            Available = true,
                            CarID = 6,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 28,
                            Available = true,
                            CarID = 6,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 29,
                            Available = true,
                            CarID = 6,
                            FeatureID = 6
                        },
                        new
                        {
                            CarFeatureID = 30,
                            Available = true,
                            CarID = 7,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 31,
                            Available = true,
                            CarID = 7,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 32,
                            Available = true,
                            CarID = 7,
                            FeatureID = 4
                        },
                        new
                        {
                            CarFeatureID = 33,
                            Available = true,
                            CarID = 7,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 34,
                            Available = true,
                            CarID = 8,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 35,
                            Available = true,
                            CarID = 8,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 36,
                            Available = true,
                            CarID = 8,
                            FeatureID = 5
                        },
                        new
                        {
                            CarFeatureID = 37,
                            Available = true,
                            CarID = 9,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 38,
                            Available = true,
                            CarID = 9,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 39,
                            Available = true,
                            CarID = 9,
                            FeatureID = 3
                        },
                        new
                        {
                            CarFeatureID = 40,
                            Available = true,
                            CarID = 10,
                            FeatureID = 1
                        },
                        new
                        {
                            CarFeatureID = 41,
                            Available = true,
                            CarID = 10,
                            FeatureID = 2
                        },
                        new
                        {
                            CarFeatureID = 42,
                            Available = true,
                            CarID = 10,
                            FeatureID = 4
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarPricing", b =>
                {
                    b.Property<int>("CarPricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarPricingID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("PricingID")
                        .HasColumnType("int");

                    b.HasKey("CarPricingID");

                    b.HasIndex("CarID");

                    b.HasIndex("PricingID");

                    b.ToTable("CarPricings");

                    b.HasData(
                        new
                        {
                            CarPricingID = 1,
                            Amount = 45000m,
                            CarID = 1,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 2,
                            Amount = 1500m,
                            CarID = 1,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 3,
                            Amount = 10000m,
                            CarID = 1,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 4,
                            Amount = 46000m,
                            CarID = 2,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 5,
                            Amount = 2500m,
                            CarID = 2,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 6,
                            Amount = 16000m,
                            CarID = 2,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 7,
                            Amount = 47000m,
                            CarID = 3,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 8,
                            Amount = 2600m,
                            CarID = 3,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 9,
                            Amount = 16500m,
                            CarID = 3,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 10,
                            Amount = 44000m,
                            CarID = 4,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 11,
                            Amount = 2400m,
                            CarID = 4,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 12,
                            Amount = 15500m,
                            CarID = 4,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 13,
                            Amount = 50000m,
                            CarID = 5,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 14,
                            Amount = 3000m,
                            CarID = 5,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 15,
                            Amount = 17000m,
                            CarID = 5,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 16,
                            Amount = 35000m,
                            CarID = 6,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 17,
                            Amount = 1400m,
                            CarID = 6,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 18,
                            Amount = 9000m,
                            CarID = 6,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 19,
                            Amount = 38000m,
                            CarID = 7,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 20,
                            Amount = 1500m,
                            CarID = 7,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 21,
                            Amount = 10000m,
                            CarID = 7,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 22,
                            Amount = 27000m,
                            CarID = 8,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 23,
                            Amount = 900m,
                            CarID = 8,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 24,
                            Amount = 6000m,
                            CarID = 8,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 25,
                            Amount = 28000m,
                            CarID = 9,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 26,
                            Amount = 900m,
                            CarID = 9,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 27,
                            Amount = 6000m,
                            CarID = 9,
                            PricingID = 4
                        },
                        new
                        {
                            CarPricingID = 28,
                            Amount = 25000m,
                            CarID = 10,
                            PricingID = 2
                        },
                        new
                        {
                            CarPricingID = 29,
                            Amount = 850m,
                            CarID = 10,
                            PricingID = 3
                        },
                        new
                        {
                            CarPricingID = 30,
                            Amount = 5500m,
                            CarID = 10,
                            PricingID = 4
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentID");

                    b.HasIndex("BlogID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustomerMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureID");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureID = 1,
                            Name = "Bluetooth"
                        },
                        new
                        {
                            FeatureID = 2,
                            Name = "Klima"
                        },
                        new
                        {
                            FeatureID = 3,
                            Name = "Hava Yastığı"
                        },
                        new
                        {
                            FeatureID = 4,
                            Name = "ABS"
                        },
                        new
                        {
                            FeatureID = 5,
                            Name = "Cruise Control"
                        },
                        new
                        {
                            FeatureID = 6,
                            Name = "Isıtmalı Koltuk"
                        },
                        new
                        {
                            FeatureID = 7,
                            Name = "Geri Görüş Kamerası"
                        },
                        new
                        {
                            FeatureID = 8,
                            Name = "Park Sensörü"
                        },
                        new
                        {
                            FeatureID = 9,
                            Name = "USB Girişi"
                        },
                        new
                        {
                            FeatureID = 10,
                            Name = "Apple CarPlay"
                        },
                        new
                        {
                            FeatureID = 11,
                            Name = "Android Auto"
                        },
                        new
                        {
                            FeatureID = 12,
                            Name = "Navigasyon"
                        },
                        new
                        {
                            FeatureID = 13,
                            Name = "Otomatik Far"
                        },
                        new
                        {
                            FeatureID = 14,
                            Name = "Yağmur Sensörü"
                        },
                        new
                        {
                            FeatureID = 15,
                            Name = "Panoramik Cam Tavan"
                        },
                        new
                        {
                            FeatureID = 16,
                            Name = "Deri Koltuk"
                        },
                        new
                        {
                            FeatureID = 17,
                            Name = "Elektrikli Cam"
                        },
                        new
                        {
                            FeatureID = 18,
                            Name = "Otomatik Klima"
                        },
                        new
                        {
                            FeatureID = 19,
                            Name = "Start-Stop Sistemi"
                        },
                        new
                        {
                            FeatureID = 20,
                            Name = "Çocuk Koltuğu Bağlantısı (ISOFIX)"
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.FooterAddress", b =>
                {
                    b.Property<int>("FooterAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FooterAddressID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FooterAddressID");

                    b.ToTable("FooterAddresses");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            Name = "İstanbul - Sabiha Gökçen Havalimanı"
                        },
                        new
                        {
                            LocationID = 2,
                            Name = "İstanbul - İstanbul Havalimanı"
                        },
                        new
                        {
                            LocationID = 3,
                            Name = "Ankara - Esenboğa Havalimanı"
                        },
                        new
                        {
                            LocationID = 4,
                            Name = "İzmir - Adnan Menderes Havalimanı"
                        },
                        new
                        {
                            LocationID = 5,
                            Name = "Antalya - Antalya Havalimanı"
                        },
                        new
                        {
                            LocationID = 6,
                            Name = "Bursa - Yenişehir Havalimanı"
                        },
                        new
                        {
                            LocationID = 7,
                            Name = "Adana - Şakirpaşa Havalimanı"
                        },
                        new
                        {
                            LocationID = 8,
                            Name = "Trabzon - Trabzon Havalimanı"
                        },
                        new
                        {
                            LocationID = 9,
                            Name = "Gaziantep - Oğuzeli Havalimanı"
                        },
                        new
                        {
                            LocationID = 10,
                            Name = "Dalaman - Dalaman Havalimanı"
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Pricing", b =>
                {
                    b.Property<int>("PricingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PricingID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PricingID");

                    b.ToTable("Pricings");

                    b.HasData(
                        new
                        {
                            PricingID = 2,
                            Name = "Aylık"
                        },
                        new
                        {
                            PricingID = 3,
                            Name = "Günlük"
                        },
                        new
                        {
                            PricingID = 4,
                            Name = "Haftalık"
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.RentACar", b =>
                {
                    b.Property<int>("RentACarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentACarId"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.HasKey("RentACarId");

                    b.HasIndex("CarID");

                    b.HasIndex("LocationID");

                    b.ToTable("RentACars");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.RentACarProcess", b =>
                {
                    b.Property<int>("RentACarProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentACarProcessID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DropOffDate")
                        .HasColumnType("Date");

                    b.Property<string>("DropOffDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DropOffLocation")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("DropOffTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("PickUpDate")
                        .HasColumnType("Date");

                    b.Property<string>("PickUpDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PickUpLocation")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PickUpTime")
                        .HasColumnType("time");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RentACarProcessID");

                    b.HasIndex("CarID");

                    b.HasIndex("CustomerID");

                    b.ToTable("RentACarProcesses");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverLicenseYear")
                        .HasColumnType("int");

                    b.Property<int?>("DropOffLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PickUpLocationID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationID");

                    b.HasIndex("CarID");

                    b.HasIndex("DropOffLocationID");

                    b.HasIndex("PickUpLocationID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaytingValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewID");

                    b.HasIndex("CarID");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewID = 1,
                            CarID = 1,
                            Comment = "Harika bir araç, sürüş keyfi mükemmel!",
                            CustomerImage = "",
                            CustomerName = "Ali",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4029)
                        },
                        new
                        {
                            ReviewID = 2,
                            CarID = 1,
                            Comment = "Konforlu ve sessiz.",
                            CustomerImage = "",
                            CustomerName = "Ayşe",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4041)
                        },
                        new
                        {
                            ReviewID = 3,
                            CarID = 2,
                            Comment = "Lüks bir sürüş, her şey çok kaliteli.",
                            CustomerImage = "",
                            CustomerName = "Mehmet",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4043)
                        },
                        new
                        {
                            ReviewID = 4,
                            CarID = 2,
                            Comment = "Yakıt tüketimi biraz yüksek ama konforlu.",
                            CustomerImage = "",
                            CustomerName = "Elif",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4044)
                        },
                        new
                        {
                            ReviewID = 5,
                            CarID = 3,
                            Comment = "Motor gücü çok iyi, direksiyon hassas.",
                            CustomerImage = "",
                            CustomerName = "Can",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4045)
                        },
                        new
                        {
                            ReviewID = 6,
                            CarID = 3,
                            Comment = "İç tasarım oldukça şık ve modern.",
                            CustomerImage = "",
                            CustomerName = "Zeynep",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4048)
                        },
                        new
                        {
                            ReviewID = 7,
                            CarID = 4,
                            Comment = "Uzun yol için ideal bir araç.",
                            CustomerImage = "",
                            CustomerName = "Ahmet",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4049)
                        },
                        new
                        {
                            ReviewID = 8,
                            CarID = 4,
                            Comment = "Yakıt tasarrufu iyi ama koltuklar biraz sert.",
                            CustomerImage = "",
                            CustomerName = "Fatma",
                            RaytingValue = 3,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4050)
                        },
                        new
                        {
                            ReviewID = 9,
                            CarID = 5,
                            Comment = "Güvenlik özellikleri çok iyi, aile aracı olarak ideal.",
                            CustomerImage = "",
                            CustomerName = "Osman",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4051)
                        },
                        new
                        {
                            ReviewID = 10,
                            CarID = 5,
                            Comment = "Sessiz ve rahat bir sürüş.",
                            CustomerImage = "",
                            CustomerName = "Seda",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4052)
                        },
                        new
                        {
                            ReviewID = 11,
                            CarID = 6,
                            Comment = "Şehir içi kullanım için ideal.",
                            CustomerImage = "",
                            CustomerName = "Murat",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4054)
                        },
                        new
                        {
                            ReviewID = 12,
                            CarID = 6,
                            Comment = "Fiyat/performans oranı çok iyi.",
                            CustomerImage = "",
                            CustomerName = "Derya",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4055)
                        },
                        new
                        {
                            ReviewID = 13,
                            CarID = 7,
                            Comment = "Yakıt tasarrufu çok başarılı.",
                            CustomerImage = "",
                            CustomerName = "Emre",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4056)
                        },
                        new
                        {
                            ReviewID = 14,
                            CarID = 7,
                            Comment = "Rahat ve güvenli bir araç.",
                            CustomerImage = "",
                            CustomerName = "Hülya",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4057)
                        },
                        new
                        {
                            ReviewID = 15,
                            CarID = 8,
                            Comment = "Küçük ama kullanışlı.",
                            CustomerImage = "",
                            CustomerName = "Berk",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4058)
                        },
                        new
                        {
                            ReviewID = 16,
                            CarID = 8,
                            Comment = "Park etmesi kolay ve şehir için ideal.",
                            CustomerImage = "",
                            CustomerName = "Aylin",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4059)
                        },
                        new
                        {
                            ReviewID = 17,
                            CarID = 9,
                            Comment = "Tasarımı çok güzel ve modern.",
                            CustomerImage = "",
                            CustomerName = "Tolga",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4061)
                        },
                        new
                        {
                            ReviewID = 18,
                            CarID = 9,
                            Comment = "Motor performansı beklediğimden iyi.",
                            CustomerImage = "",
                            CustomerName = "Merve",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4062)
                        },
                        new
                        {
                            ReviewID = 19,
                            CarID = 10,
                            Comment = "Küçük aileler için uygun bir araç.",
                            CustomerImage = "",
                            CustomerName = "Cem",
                            RaytingValue = 4,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4063)
                        },
                        new
                        {
                            ReviewID = 20,
                            CarID = 10,
                            Comment = "Fiyatı uygun ve kullanımı kolay.",
                            CustomerImage = "",
                            CustomerName = "Selin",
                            RaytingValue = 5,
                            ReviewDate = new DateTime(2025, 8, 22, 17, 57, 33, 369, DateTimeKind.Local).AddTicks(4064)
                        });
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<int>("SocialMediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialMediaID"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialMediaID");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.TagCloud", b =>
                {
                    b.Property<int>("TagCloudID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagCloudID"));

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagCloudID");

                    b.HasIndex("BlogID");

                    b.ToTable("TagClouds");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Testimonial", b =>
                {
                    b.Property<int>("TestimonialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestimonialID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestimonialID");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.AppRole", "AppRole")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Blog", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Author", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Category", "Category")
                        .WithMany("Blogs")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Car", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Brand", "Brand")
                        .WithMany("Cars")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarDescription", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("CarDescriptions")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarFeature", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("CarFeatures")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Feature", "Feature")
                        .WithMany("CarFeatures")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.CarPricing", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("CarPricings")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Pricing", "Pricing")
                        .WithMany("CarPricings")
                        .HasForeignKey("PricingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Pricing");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Comment", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.RentACar", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("RentACars")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Location", "Location")
                        .WithMany("RentACars")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.RentACarProcess", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Customer", "Customer")
                        .WithMany("RentACarProcesses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UdemyCarBook.Domain.Entities.Location", "DropOffLocation")
                        .WithMany("DropOffReservation")
                        .HasForeignKey("DropOffLocationID");

                    b.HasOne("UdemyCarBook.Domain.Entities.Location", "PickUpLocation")
                        .WithMany("PickUpReservation")
                        .HasForeignKey("PickUpLocationID");

                    b.Navigation("Car");

                    b.Navigation("DropOffLocation");

                    b.Navigation("PickUpLocation");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Review", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Car", "Car")
                        .WithMany("Reviews")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.TagCloud", b =>
                {
                    b.HasOne("UdemyCarBook.Domain.Entities.Blog", "Blog")
                        .WithMany("TagClouds")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Author", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Blog", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TagClouds");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Car", b =>
                {
                    b.Navigation("CarDescriptions");

                    b.Navigation("CarFeatures");

                    b.Navigation("CarPricings");

                    b.Navigation("RentACars");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Category", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Customer", b =>
                {
                    b.Navigation("RentACarProcesses");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Feature", b =>
                {
                    b.Navigation("CarFeatures");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Location", b =>
                {
                    b.Navigation("DropOffReservation");

                    b.Navigation("PickUpReservation");

                    b.Navigation("RentACars");
                });

            modelBuilder.Entity("UdemyCarBook.Domain.Entities.Pricing", b =>
                {
                    b.Navigation("CarPricings");
                });
#pragma warning restore 612, 618
        }
    }
}
